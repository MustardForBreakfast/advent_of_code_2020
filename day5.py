import typing as t
from enum import Enum
import re


ROWS = 128
COLS = 8


class RowPick(Enum):
    LOWER = "F"
    UPPER = "B"


class ColPick(Enum):
    LOWER = "L"
    UPPER = "R"


# ***** Parsing helpers *****

def row_picks(row_hash: str) -> t.Tuple[RowPick, ...]:
    """ First 7 characters -> RowPicks."""
    return tuple(map(lambda c: RowPick(c), list(row_hash)))


def col_picks(col_hash: str) -> t.Tuple[ColPick, ...]:
    """ Last 3 characters -> ColPicks."""
    return tuple(map(lambda c: ColPick(c), list(col_hash)))


def parse_picks(
    seat_hash: str
) -> t.Tuple[t.Tuple[RowPick, ...], t.Tuple[ColPick]]:
    """Break the hash into row and col components, parse into enums."""
    groups = re.search('^([FB]{7})([LR]{3})$', seat_hash)
    return (row_picks(groups[1]), col_picks(groups[2]))


# ***** Filtering algo *****

def generate_next_range(
    current_range: t.Iterable,
    pick: t.Union[RowPick, ColPick]
) -> t.Iterable:
    """Discard the appropriate half of a range, return what's left."""
    length = len(current_range)
    if pick in (RowPick.LOWER, ColPick.LOWER):
        return current_range[:length//2]

    return current_range[length//2:]


def _find_row_or_column_number(
    picks: t.Tuple[t.Union[RowPick, ColPick], ...],
    total_count: int
) -> int:
    """Find a row or column coordinate by recursively eliminating other possibilities."""

    def _get_number_or_next_range(
        current_range: t.Iterable[int],
        picks: t.Tuple[t.Union[RowPick, ColPick], ...]
    ) -> t.Union[int, t.Iterable[int]]:
        """Recursively dig through progressively smaller ranges until only one number remains."""
        if len(current_range) == 1:
            # return if we've found the row or column number
            return current_range[0]

        next_pick = picks[0]
        next_range = generate_next_range(current_range, next_pick)
        return _get_number_or_next_range(next_range, picks[1:])

    start_range = range(0, total_count)
    return _get_number_or_next_range(start_range, picks)


def find_row(row_picks: t.Tuple[RowPick, ...]) -> int:
    """Find a row coordinate."""
    return _find_row_or_column_number(row_picks, ROWS)


def find_col(col_picks: t.Tuple[ColPick, ...]) -> int:
    """Find a column coordinate."""
    return _find_row_or_column_number(col_picks, COLS)


def get_seat_coords(seat_hash: t.Tuple[str, ...]) -> t.Tuple[int, int]:
    """Given a hash, find the coordinates for a seat."""
    row_picks, col_picks = parse_picks(seat_hash)
    row_number = find_row(row_picks)
    col_number = find_col(col_picks)
    return (row_number, col_number)


def id_from_coords(row: int, col: int) -> int:
    """Calculate a seat ID from its coordinates."""
    return (row * 8) + col


def get_seat_id(seat_hash: str) -> int:
    """Given a hash, determine a seat ID."""
    row, col = get_seat_coords(seat_hash)
    return id_from_coords(row, col)


def calculate_occupied_ids(seat_hashes: t.Tuple[str, ...]) -> t.Tuple[int, ...]:
    """Figure out which seats in the plane have boarding passes."""
    return tuple(map(get_seat_id, seat_hashes))


def generate_all_ids(rows: int, cols: int) -> t.Tuple[int, ...]:
    """Generate all possible seat IDs for the plane."""
    ids = []
    for r in range(0, rows):
        for c in range(0, cols):
            ids.append(id_from_coords(r, c))
    return tuple(ids)


def get_unoccupied_seats(seat_hashes: t.Tuple[str, ...]) -> t.Tuple[str, ...]:
    """Subtract claimed/occupied seats from all possible seats."""
    all_ids = generate_all_ids(ROWS, COLS)
    occupied_ids = calculate_occupied_ids(seat_hashes)
    return tuple(set(all_ids) - set(occupied_ids))


def find_my_seat(seat_hashes: t.Tuple[str, ...]) -> int:
    """Given all seat hashes _but_ my own, determine my seat ID.

    Given information:
    - "all possible seats" will _overrepresent_ the number of seats in the plane.
    - My seat id _must_ have sequential neighbors in the plane, and those seats are occupied.
      e.g. (my_id + 1) and (my_id - 1) both exist and are claimed.
    - My seat id is the only unclaimed id that will fulfill this criteria.
    """
    unclaimed_seats = get_unoccupied_seats(seat_hashes)

    def _has_no_unclaimed_neighbors(id):
        return id + 1 not in unclaimed_seats and id - 1 not in unclaimed_seats

    remaining = tuple(filter(_has_no_unclaimed_neighbors, unclaimed_seats))
    return remaining[0]


SEAT_DATA = [
    'FBBBFBBLRR',
    'BFFFBBFLRR',
    'BFBFBBFLLR',
    'BBFFFFBLLR',
    'FBBFBBFRLL',
    'BBFFFFBRLL',
    'FBBFBFFLLR',
    'BFFBBBFRRL',
    'FFBFBFFRLR',
    'FBFFFFBLLL',
    'FBFFFFFLRL',
    'FFFBFBBRLR',
    'FFBFFFFLLL',
    'BFBBBFFLLL',
    'FFBBBFBRLR',
    'BFFBFBFLLL',
    'FBFBFFFLLL',
    'BBFFBBBRRL',
    'FBFFBFBLLL',
    'BFFBFBFRRL',
    'FBFBFFFRLR',
    'BFBBBFBRLL',
    'FFBBFBFLRL',
    'FBBFFBFRRR',
    'BFBBBBBLRL',
    'FFBFBFBLRL',
    'FFBFFFFLRL',
    'BFBFBFBRRR',
    'FBBBBBBRRR',
    'BFBFFBBRLL',
    'BBFFBFBLLL',
    'BFBFBBFRLL',
    'FBFBBBBRLR',
    'BFFBBFBRRL',
    'BFBBBFBRRR',
    'FBBBFBBLRL',
    'BBFFBBBLRL',
    'FFBBFFFRRR',
    'FBFFBFFLLL',
    'FBFFBBFRLL',
    'FBBBFBFRLL',
    'BFFBBFFLRL',
    'FFFBFBBRRR',
    'BFBBBBFRLR',
    'FBFBFBBRRL',
    'BFFFFFFRRL',
    'BFBBBBFRRL',
    'FBFBBFFRRL',
    'FBFFBFFRLR',
    'FBBFFBBRRR',
    'FBFBBFFRRR',
    'FFFBBFFRLR',
    'BBFFBFBRRL',
    'FBBBBBFRRR',
    'BFBBBBBRLL',
    'BFFBFFBLRL',
    'FBBBFFBRRR',
    'BFFFBBFRLR',
    'FFBFBBBRLL',
    'BFBBBFFRLL',
    'BFBBFBFRRR',
    'FBFBFBBLLL',
    'BBFBFBBRLL',
    'FBBFFBBRLR',
    'FFBBFBFLRR',
    'FBFFFFFRLL',
    'BFBFBBBRLR',
    'FBFFFFBLRR',
    'FBFFFFBRLL',
    'BFFFFFFRLL',
    'BBFBFFFRRL',
    'BFBFBBBRRR',
    'FFBFFFBLRL',
    'BFFFBBBLLR',
    'FBFFBFFRLL',
    'FFFBFBBLRL',
    'BFBFBBFRRL',
    'FFBFFBBRLL',
    'FBBFBFFLRR',
    'FBFFFFFLLR',
    'FFBFFBFRLL',
    'FFBFFBFLRR',
    'FBFBBBFRLR',
    'FFBFBBFLLR',
    'BBFFBFBLLR',
    'FFBBBBBRRL',
    'BFFBBBBRLL',
    'FFBFBFFLLL',
    'BBFFFBBRRL',
    'FFBFFBFRRL',
    'BBFFBFFRLR',
    'FBFBBFFRLR',
    'FBBFFBFRRL',
    'FBBBFBBRRR',
    'FFBBBBBRRR',
    'BFFBBFBRLL',
    'BFBFBBFLLL',
    'FFBFBBBRRR',
    'BBFFFBBRRR',
    'BFFBFFBLRR',
    'FFFBBFFLRL',
    'BFFBBBFRLR',
    'BFBBFBBRLL',
    'BFBBFBBLLL',
    'FFBFBFBRRL',
    'BFFBBFFRRR',
    'FBFBBBBLLL',
    'FBFFFBFRRR',
    'BFFBFFFLRL',
    'FFFBFBBRRL',
    'FBFBFBBRRR',
    'FBBFBFBLLR',
    'FBBBFFBRLR',
    'FBFBFFBLLR',
    'FBFFBBBRLL',
    'FBFFFBBLRR',
    'BFFFBFFLLL',
    'BFBBBBBLLR',
    'FFBBFFBRLR',
    'BFBFBBFLRL',
    'BBFFBBBRRR',
    'FFBBFFFLRR',
    'BFBFFFFRLR',
    'BFBBBFBRRL',
    'BFFBBBBRLR',
    'BFFBFBBLLR',
    'BFFBBFFLLR',
    'FBFFBBBRLR',
    'FBFFBBBLLR',
    'BBFFBFFLLL',
    'BFFBFBFRRR',
    'BFBFFBFRLR',
    'FBFFFBBLRL',
    'FBBBFBFRRL',
    'BBFFFFBLLL',
    'FFBBBFFLRL',
    'BFFBFFFRLR',
    'FBBFBBFLLL',
    'FBFFBFFRRL',
    'FFBFFBBRLR',
    'BBFFBFFLRR',
    'FBFBBBBLLR',
    'FFBBBFFLRR',
    'BFBBFBFLLR',
    'FBBFBBFLLR',
    'FFBFFBBRRL',
    'BBFFFFBRRL',
    'FBBBBFBRRL',
    'FBFBFFFLLR',
    'BFBFBFBLLR',
    'FFBFBFBRRR',
    'BFFFBFFLLR',
    'BBFFBFFRLL',
    'FBBBFFBRLL',
    'FBBFFFFRRL',
    'FBBBFFFRRR',
    'BBFFFBBRLL',
    'BFFBBFFLRR',
    'BFFBFBBRLR',
    'BFFBFBBLLL',
    'BBFBFFBLLR',
    'FBBBBFFLLL',
    'BFFBBFBLRL',
    'FBBBBFBRRR',
    'FBBFBBBRRL',
    'BFFBBFFRLL',
    'BFFFFFBLLR',
    'BFFBBFBLRR',
    'FFBBFBFRRR',
    'BFBFFBFRRL',
    'BFFFFBBLRR',
    'FFFBBFBLRR',
    'BFFFBBBLRR',
    'FFBFBBFLRL',
    'FBBBFFFLLL',
    'FBFBFBFLRR',
    'FFFBBFBLLL',
    'FFBBFBBLLR',
    'FBBFBBFLRL',
    'FFBFFBBRRR',
    'FBBBBFFRRL',
    'FFFBBBFRLR',
    'FBBFFFBLRL',
    'BFFBFBBLRL',
    'BFFBFBFLRR',
    'BFFBFFBRRR',
    'FFBFBBBRRL',
    'BFFBFFFLLR',
    'BFFBBFBRLR',
    'FBBBFFFRRL',
    'BBFBFFBLRL',
    'BBFFFBBLLR',
    'FBFBFFFRRR',
    'BFFFBBBLRL',
    'FBFFBFFLLR',
    'BBFFFFFRLL',
    'FFBFFFBLLL',
    'BFBBFBBRLR',
    'BFFFFFBLLL',
    'BFBBFFFLLL',
    'FFBBBBFRLR',
    'BBFFFFFLLR',
    'BFFFFBFLRL',
    'FFBFFBBLLR',
    'BBFFBFFLLR',
    'BFBFFBFRRR',
    'FBFFBFFRRR',
    'BBFFFBFLLL',
    'FFBFFFFRRL',
    'FBBFBFFRRR',
    'FFBBFBBRRL',
    'FFBBBFFLLR',
    'BFFFFBBLLR',
    'FFBFBFBLLR',
    'BFFBBBBLLR',
    'FBBBBFBLLL',
    'BFBFBBBRLL',
    'FFBFBBFRRR',
    'FFFBFBBLLR',
    'FFFBBFBRRR',
    'FFFBBBBLRR',
    'FBBFFFFLRL',
    'FFFBBFFLRR',
    'FFBFBFFRLL',
    'FBBFBBBRLR',
    'FFBFBFBRLR',
    'FBBBFFBLRL',
    'BFFFFFFLRL',
    'BFFBBBBLRR',
    'FBBFFBBLRR',
    'BBFFBBFRRL',
    'FFBFBBBLLR',
    'FFBFFFFRRR',
    'FBFFFBBRRL',
    'BFBFFFBLLR',
    'FBBFBFBRRL',
    'BBFBFFBRLR',
    'FBBBBBFRLR',
    'BFFBBBFLRR',
    'BFFFFFBLRR',
    'BBFFBBFRLL',
    'FFFBBFFRRR',
    'FBBBBFFRLL',
    'FFBFFFFRLR',
    'BFFFBFFRRL',
    'FBBBBFFLRL',
    'BBFBFFFRLL',
    'BBFFFBBLRR',
    'FBBBFFFLLR',
    'BFFBFBFLRL',
    'FFBBBBFLLL',
    'BFFFBFFRLL',
    'FBBFFBFLLR',
    'BBFBFBBRRR',
    'FFBFFFBRLL',
    'FBFBBBFRLL',
    'BFBBFBBLRR',
    'FBBBBFFRLR',
    'BFFBBBBLLL',
    'FFFBBBBRLR',
    'FBBFBBBRLL',
    'FFBBBFBLRL',
    'BBFBFFBLRR',
    'FFBBFFFLLR',
    'FFBBFBFRLR',
    'BFBBBFBRLR',
    'FBBFFFFLLL',
    'BBFFFBFRRR',
    'FFBFBBFLLL',
    'FBBFBBBRRR',
    'BFBBFFBRRR',
    'FBBFFBFLLL',
    'FFBFBBBLRL',
    'FBFBBFBRRR',
    'FBFBFFFRLL',
    'BFFFFFFLLR',
    'FBFBBBFLLR',
    'BFBFFBFRLL',
    'BFBFFBBRLR',
    'BFFBBFBLLR',
    'BFFBFBBLRR',
    'BFBBBFFLRL',
    'BFBBFBFLRR',
    'BFBBBFFRLR',
    'FFFBBFFRRL',
    'BFFFBBFRRL',
    'BFFBFBFLLR',
    'BFBFFBBLRR',
    'BFBBBBBRRR',
    'FFBBFBBLRR',
    'BFFBBFFRLR',
    'FFBFBFBRLL',
    'BFBBBBFLRL',
    'FBBFBBFLRR',
    'FBFBBBFLRL',
    'FBFFFBBRRR',
    'BBFBFFFRRR',
    'FBFFBFBRLL',
    'FBBBBBBRLL',
    'FFBBBFFRRL',
    'FFBBFFFRLL',
    'FBFBBFBRLL',
    'FFFBBBBLLL',
    'BFBFBBBLLL',
    'FFFBBBFLLR',
    'FFBFBBFRLL',
    'BBFFBBBLLR',
    'FFFBBFBLRL',
    'FFBBFBBLLL',
    'FBFFFBFRLR',
    'BFBBFBBLRL',
    'FFFBFBFRLR',
    'BFBFFFBRLR',
    'FFBBBBBLLL',
    'FBFBFFBRRR',
    'BFFBBBBRRL',
    'FBBBBFBLLR',
    'BFBBFBFRRL',
    'BBFBFBFLLR',
    'BFFFBFBRRR',
    'FFFBBFBRRL',
    'BFBBBBFLLR',
    'FBBBFBFLLR',
    'FFBFFBFLRL',
    'BFFFBFBLLL',
    'BFBBBBBLRR',
    'BFBFBBBLRR',
    'BFFBFBBRLL',
    'FFBFBFFLRL',
    'FBBBFBBRRL',
    'BFFBBFFLLL',
    'FBFBFFBRLR',
    'FBBFFFFLRR',
    'FBBFBFBLRL',
    'BBFFBBBLRR',
    'BBFFBBFLLL',
    'FBBBBBBRRL',
    'BFFFFBFRRL',
    'BFFFFBBLRL',
    'BBFFFBFRLL',
    'BFFBBFFRRL',
    'FBBBFBFRLR',
    'FBFFBFBLLR',
    'FFBFFFFLRR',
    'FBBBBBBLRL',
    'FFBBFBBRLL',
    'FFBBFBBLRL',
    'FBFFFBBRLR',
    'FFBBFFFLLL',
    'BFFFFBFRRR',
    'BFBFBFBLLL',
    'FFFBBFFLLR',
    'FBBBFBBRLL',
    'BFFFFBBRLL',
    'FBFBFFBRRL',
    'BFBBBFBLLR',
    'BFFBBBBRRR',
    'BBFFFFFRLR',
    'BFFFBBBRRL',
    'BBFFFFFRRL',
    'BFFBFBFRLL',
    'BBFFFFFLRR',
    'FBFBBBBLRR',
    'FBFFBBBLRL',
    'BFBFBFFRLL',
    'FFFBBBBLLR',
    'FBFBBBBRRR',
    'FBBBBBFRRL',
    'BFBFFFBRRL',
    'BFBFFFBRRR',
    'BBFBFBBLRR',
    'FFBBBFBLLR',
    'FFBBBFBRLL',
    'BFBFFFFLLR',
    'BFBFBFFLRL',
    'FBFFFBBLLR',
    'BFFFFFBRLL',
    'BBFBFBBRRL',
    'BFBBFFFRLL',
    'BFFFFFFRLR',
    'FBFFBFBRRR',
    'BBFFBBFRRR',
    'FFBBBFFRRR',
    'FFBBBFFLLL',
    'BFBBFFFLRR',
    'FBBFFBFLRL',
    'FBFFFFBLLR',
    'BFBBBFBLRL',
    'BFFBBBFRRR',
    'BFBBBFFLLR',
    'BFFFBBBRRR',
    'BBFBFBFRRR',
    'FFBFFBFRLR',
    'FBBFFFFRLR',
    'BFBFBBFRRR',
    'BBFFBBFLRR',
    'FBBBFFBLRR',
    'BFBBFFBLRL',
    'FBFBBBBRRL',
    'FFFBBBFLRL',
    'FBBFFFBRLR',
    'FFFBBFFLLL',
    'BFFBFBBRRL',
    'BFFFBFBLRR',
    'FBBFFFBRRR',
    'FBBFFFBRRL',
    'FBBBBBBRLR',
    'FBFFFBFLRL',
    'BBFFBFBLRL',
    'FBBFFFBLLR',
    'BFBFFBBRRR',
    'FBFBBFFLRR',
    'FBBFFBBLLR',
    'FFBBBFFRLR',
    'BFFBFFFLLL',
    'FBBFFFFRLL',
    'BFBFFBBLRL',
    'BFBFFBFLLR',
    'BFBBFFFRRR',
    'BBFFFBFRLR',
    'FBFBBBFRRL',
    'FFBBFBBRLR',
    'BFFFFFFRRR',
    'BBFBBFFLLL',
    'BBFBFFBRRR',
    'FBBFFBBLLL',
    'FFBFBFBLRR',
    'BFBBFFFRRL',
    'BBFBFFFLRR',
    'FBBBBFBLRL',
    'FBBFBFBRRR',
    'FBFBFBBLRR',
    'FBFFBBBLLL',
    'FFBFBFFLRR',
    'BFBFBFFRRR',
    'BFBFBFFLRR',
    'BFFFFFFLRR',
    'FBFBFBBRLR',
    'FFBFFFFRLL',
    'FBBBFBFLRL',
    'BFBFBBFLRR',
    'FFBBFBBRRR',
    'FBFBFFFLRR',
    'BBFBFFBRRL',
    'BFBFBFFLLL',
    'FBFFBFBRLR',
    'FBBBBBBLLR',
    'FFBBBBFRLL',
    'BFBFBBBLLR',
    'FBFBBBBRLL',
    'BFBBBBFLLL',
    'FBFBFFBLRL',
    'FFFBBBBRRR',
    'BFFFFBFLLR',
    'BBFFFFBLRR',
    'BBFFFBFRRL',
    'FBBFBFFLLL',
    'BFFFBFBRLL',
    'FBBBFFBRRL',
    'FFFBFBBLRR',
    'BBFFBBFLRL',
    'BBFFBFFRRR',
    'BFFFFBFRLR',
    'FBFBBFBLRL',
    'FBFFBBFLLL',
    'FBFFFBBLLL',
    'FFBBFFBLRL',
    'FBBFBBFRLR',
    'FBBFBBBLRL',
    'FBFFFBBRLL',
    'BFBFBBBRRL',
    'BFBFBFBRLR',
    'FBFFBFFLRR',
    'BFFFBFFLRR',
    'BFBBBFFLRR',
    'FBBBBBFLLL',
    'FFBFBFFRRR',
    'BBFFBFFRRL',
    'BFBBBFBLLL',
    'FFBBFBFRLL',
    'FBBBFBFRRR',
    'FBFFBBBLRR',
    'BBFFFFBRRR',
    'FBFBFFFRRL',
    'BFFFBBFLRL',
    'FBBFFFBLLL',
    'BFBBFFBLLR',
    'BFBBFFBLLL',
    'FBFFBBFRRR',
    'BFFBBFBRRR',
    'BFFFFFBRLR',
    'FBBBBBBLLL',
    'FFBFBBFLRR',
    'FBFBFBBRLL',
    'BBFBFFFLLR',
    'BFFFFBBRRL',
    'BFFBFFBLLR',
    'BFFFBBFRLL',
    'BBFFFFFLRL',
    'FBFFFFFLLL',
    'BBFFBBBRLL',
    'BFBBFFBRRL',
    'BFFFBBBRLL',
    'FBFFBBFLRL',
    'BBFBFFBLLL',
    'FBFBBFBLRR',
    'FFFBBBFLRR',
    'BBFBFBFLRR',
    'BFBBBBFRRR',
    'BFFFBFFLRL',
    'FBFFFFBRRL',
    'BBFBFBFLLL',
    'BFFFBBBRLR',
    'FBFFBBFRRL',
    'FBBFFBBRRL',
    'FBFBFBFRLR',
    'BFFBFFFRRL',
    'FFFBFBBLLL',
    'BFBBFBFRLL',
    'BFFFBFBLLR',
    'FBBFBBFRRL',
    'FBBBBBFLRR',
    'FBFFBFBLRR',
    'FBBBFFBLLL',
    'BFBBBFFRRR',
    'BFBFFFFLRL',
    'FFBBFFBRRL',
    'BFFFFFFLLL',
    'FFBFFBBLRL',
    'FFFBBBFRLL',
    'BFFFBBFLLL',
    'FBBBFBBRLR',
    'BBFBFFFRLR',
    'BFFBFFBLLL',
    'FFBBFBFLLR',
    'FBFFBBBRRR',
    'BFBFFBFLRR',
    'FBFBFBBLRL',
    'FFBFFFBRRR',
    'FBBFFFFLLR',
    'BFBBBFFRRL',
    'FFBBBFFRLL',
    'FFFBFBFRRR',
    'FFBBBBFLRL',
    'BFBFBFBRLL',
    'FFFBBBFLLL',
    'BFBFFFFLRR',
    'BFFBFFBRRL',
    'BFBFFBBLLL',
    'FBBBBFBLRR',
    'FFBFFBFRRR',
    'FFBFFFBLLR',
    'FFBBFFFRRL',
    'BFBFFFFRLL',
    'BBFFFBBRLR',
    'FBFBBFBRRL',
    'BFFFFFBLRL',
    'FFBFFFFLLR',
    'FBFFFBFLLR',
    'FFFBBFBRLR',
    'BBFBBFFLRL',
    'FFBBBBBLLR',
    'BFBBFBFLLL',
    'BFBFFFFRRL',
    'BFBBFFBRLR',
    'FBBBFFFRLR',
    'FBBFFBFRLR',
    'BBFBFBBRLR',
    'FBBBFFBLLR',
    'FBBBFFFRLL',
    'FBFBFBFRRR',
    'BBFFBFBRRR',
    'FFBBBBBRLL',
    'FBFFBFBRRL',
    'FBFFBBFLRR',
    'FFFBBBFRRL',
    'FFBBFFBRLL',
    'BFBFFFBRLL',
    'FBFFFBFLLL',
    'FBBBBFFRRR',
    'FBBFBFBRLL',
    'BFFBFBFRLR',
    'FFBFBFBLLL',
    'FFBBFFBRRR',
    'FBFFFFBLRL',
    'FBBBFFFLRR',
    'FFBBBBFRRL',
    'FFBFBBBRLR',
    'FBBBBFFLRR',
    'BFBFBFBLRR',
    'BBFBFFFLRL',
    'FFFBBFBRLL',
    'FBBBBBFLRL',
    'FBBFBBBLLR',
    'BFBBFFFLLR',
    'FBFFFFFRLR',
    'BBFFFFBRLR',
    'FBFFFFFRRL',
    'FFBBFFFLRL',
    'FFBBBFBRRR',
    'BBFFFBBLRL',
    'FBBBBFBRLR',
    'FBFBBFFLRL',
    'FBFFBFFLRL',
    'FFBFFFBRRL',
    'FFBBBBFLLR',
    'FBBFBFBLRR',
    'FBFBBFBLLL',
    'FFBBBFBLLL',
    'BFFFFBBRRR',
    'BBFFFBFLRL',
    'FFFBBBBRLL',
    'FFBFFBBLLL',
    'FBFFFBFLRR',
    'FBFBFFBLLL',
    'BFFFBFFRRR',
    'FFBBFFBLRR',
    'BFBBFBFRLR',
    'FFBFBFFRRL',
    'BBFFFFBLRL',
    'FFBBFFFRLR',
    'BFBBFFBLRR',
    'BBFBFBFRLL',
    'FBFFFFBRLR',
    'BBFFBBFLLR',
    'FBBFFBBLRL',
    'BFFFFFBRRL',
    'BFBBFBFLRL',
    'BBFFBFBRLR',
    'BFFFFBFLRR',
    'BFBFBFBLRL',
    'FBFBFFFLRL',
    'BFFFBBFLLR',
    'BBFBFBBLRL',
    'BFFFFBBLLL',
    'BBFBFBBLLL',
    'BFBBBBBRRL',
    'FBFFBBFLLR',
    'FFBFFBBLRR',
    'FFBBFBFRRL',
    'FBFBBBFLRR',
    'FBFBBFFLLR',
    'FFBBBBBRLR',
    'FBFBBBFLLL',
    'FBBFBBFRRR',
    'FBBFBBBLLL',
    'BFBFFBFLRL',
    'FBFBFFBRLL',
    'BFBFBFFLLR',
    'FBBFFBFRLL',
    'BFFBBBFLLR',
    'BFFFFBBRLR',
    'BFFBBFBLLL',
    'BFFFFBFRLL',
    'FFBFBBFRLR',
    'BFFFBBBLLL',
    'FBFBFBFLLL',
    'BFBBBBBRLR',
    'BFBBBFBLRR',
    'FBBBFBFLLL',
    'FBFFBBFRLR',
    'BBFFBBBRLR',
    'FFBFBBFRRL',
    'BFBFBBFRLR',
    'FBFFFFFLRR',
    'BBFFFBFLRR',
    'FBBFBFFRLR',
    'BFBBFFFLRL',
    'FBFBBFBLLR',
    'BFFBBBFLRL',
    'BFFBBBFLLL',
    'BFBBFFFRLR',
    'FBFFBBBRRL',
    'BFFFBFBLRL',
    'FBBBBBFRLL',
    'BFFBBBBLRL',
    'FBBFFFBRLL',
    'FBBFBFFRLL',
    'FBBFFBFLRR',
    'FFBFBBBLLL',
    'FFBFBBBLRR',
    'BFBFFFBLLL',
    'FFBFFFBLRR',
    'FBFBBFBRLR',
    'FBFBBBFRRR',
    'FFFBFBFRLL',
    'FBFFFBFRLL',
    'BBFFBFBRLL',
    'FFFBBBBRRL',
    'FBFBFBBLLR',
    'BBFFBBBLLL',
    'FBBBBBFLLR',
    'BFBFFFFRRR',
    'FBBBBFFLLR',
    'BFBBBBFLRR',
    'BFBFFFBLRR',
    'BFFFBBFRRR',
    'FFFBBFBLLR',
    'BFBBBBFRLL',
    'BBFBFBFRRL',
    'BBFBFFFLLL',
    'FBFBFBFRLL',
    'FBFBFFBLRR',
    'BFBFBFBRRL',
    'BFBBFFBRLL',
    'BBFBFFBRLL',
    'BFBBFBBRRR',
    'FFBBBBFLRR',
    'BBFFFBBLLL',
    'FBBBFBBLLL',
    'FFBBBFBLRR',
    'BFBFBFFRLR',
    'BBFBFBBLLR',
    'BFBFFBFLLL',
    'FBFBBFFRLL',
    'FBFBFBFLRL',
    'FBBFFFBLRR',
    'BFBFFBBRRL',
    'FFBFBFFLLR',
    'FFBBFFBLLR',
    'FFFBBBFRRR',
    'BFFBFBBRRR',
    'FFFBBBBLRL',
    'FBBBBBBLRR',
    'FBBBFBFLRR',
    'FFBBBBFRRR',
    'FFBFFBFLLL',
    'BBFFBBFRLR',
    'FBFFFFFRRR',
    'FBBBFFFLRL',
    'BFFBFFBRLR',
    'FBFFFBFRRL',
    'BBFFFFFLLL',
    'FFBBFBFLLL',
    'BFFBFFBRLL',
    'FFBBFFBLLL',
    'BBFFFBFLLR',
    'FBBFBFBLLL',
    'BFFFFFBRRR',
    'BFBFBBBLRL',
    'FBBFFBBRLL',
    'BFFBFFFRLL',
    'BFFBFFFLRR',
    'BFFBBBFRLL',
    'FBFBBFFLLL',
    'FBFBFBFRRL',
    'BFBBFBBLLR',
    'FBFBBBBLRL',
    'BFFFBFBRLR',
    'FFFBFBFRRL',
    'BBFBBFFLLR',
    'FBBFBFFLRL',
    'FFBBBBBLRR',
    'FBBBBFBRLL',
    'BBFBFBFRLR',
    'BFBBBBBLLL',
    'FBBBFBBLLR',
    'FFFBBFFRLL',
    'FFFBFBBRLL',
    'FFBFFBFLLR',
    'BBFFFFFRRR',
    'BBFFBFFLRL',
    'FBFFFFBRRR',
    'BFBFFFBLRL',
    'BBFFBFBLRR',
    'FFBBBFBRRL',
    'FBFFBFBLRL',
    'FBBFBFBRLR',
    'BFBFBFFRRL',
    'BFFFBFBRRL',
    'BFFFBFFRLR',
    'BBFBFBFLRL',
    'FBBFBFFRRL',
    'BFBBFBBRRL',
    'BFFFFBFLLL',
    'FBBFBBBLRR',
    'BFBFFFFLLL',
    'FFBBBBBLRL',
    'BFBFFBBLLR',
    'FBFBFBFLLR',
    'FFBFFFBRLR',
    'FBBFFFFRRR',
]

if __name__ == "__main__":
    seat_id = find_my_seat(SEAT_DATA)
    print(seat_id)
